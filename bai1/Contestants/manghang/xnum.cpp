#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <complex>
#include <locale>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <bitset>
using namespace std;
const string ans4[] =
{
    "10185934=1034*9851",
    "10149750=1041*9750",
    "10293966=1062*9693",
    "10699744=1076*9944",
    "10396800=1083*9600",
    "10134985=1085*9341",
    "10129900=1100*9209",
    "10311966=1101*9366",
    "10619145=1101*9645",
    "10734192=1104*9723",
    "10291779=1107*9297",
    "10192248=1122*9084",
    "10219680=1128*9060",
    "10511694=1161*9054",
    "11059164=1164*9501",
    "10772190=1170*9207",
    "10905250=1205*9050",
    "11602926=1206*9621",
    "11908215=1215*9801",
    "11648952=1218*9564",
    "11692800=1218*9600",
    "11926728=1221*9768",
    "10128235=1235*8201",
    "12128935=1235*9821",
    "11420923=1241*9203",
    "12097147=1247*9701",
    "11391250=1250*9113",
    "11259000=1251*9000",
    "11529216=1251*9216",
    "12159720=1251*9720",
    "11925540=1254*9510",
    "12195760=1256*9710",
    "10081260=1260*8001",
    "12166942=1262*9641",
    "11692228=1268*9221",
    "11920468=1268*9401",
    "12199752=1272*9591",
    "10237864=1274*8036",
    "12129754=1274*9521",
    "12419775=1275*9741",
    "10742868=1278*8406",
    "12328960=1280*9632",
    "11823997=1289*9173",
    "11952292=1292*9251",
    "11929918=1298*9191",
    "10173820=1301*7820",
    "11930170=1301*9170",
    "11085304=1304*8501",
    "10723185=1305*8217",
    "12097350=1305*9270",
    "11306857=1307*8651",
    "12613990=1310*9629",
    "11378169=1311*8679",
    "11147836=1316*8471",
    "12417993=1317*9429",
    "12893760=1320*9768",
    "12310938=1338*9201",
    "11344860=1341*8460",
    "11453481=1341*8541",
    "11803482=1341*8802",
    "11948310=1341*8910",
    "12463960=1346*9260",
    "12439129=1349*9221",
    "10801350=1350*8001",
    "10813500=1350*8010",
    "11515383=1353*8511",
    "12586392=1356*9282",
    "11435985=1359*8415",
    "12597930=1359*9270",
    "13489960=1364*9890",
    "11330865=1365*8301",
    "11187360=1371*8160",
    "12371904=1371*9024",
    "12717396=1371*9276",
    "13468972=1382*9746",
    "11898535=1385*8591",
    "11388762=1386*8217",
    "13683978=1386*9873",
    "10133788=1388*7301",
    "11850394=1394*8501",
    "13104994=1394*9401",
    "11426800=1400*8162",
    "12497800=1400*8927",
    "12951400=1400*9251",
    "12964000=1400*9260",
    "10217493=1401*7293",
    "10671417=1401*7617",
    "11074905=1401*7905",
    "11844054=1401*8454",
    "12941037=1401*9237",
    "13041909=1401*9309",
    "13104954=1401*9354",
    "10391746=1406*7391",
    "10657480=1406*7580",
    "10796674=1406*7679",
    "11417805=1407*8115",
    "10371649=1409*7361",
    "11844000=1410*8400",
    "11833645=1415*8363",
    "11541816=1416*8151",
};
int n, k;
int start, finish;
vector<int> ansA, ansB, ansC;
set<long long> st;

string Str(long long x)
{
    stringstream ss;
    ss << x;
    return ss.str();
}

bool Check(long long a, int b, int c)
{
    string sA = Str(a), sBC = Str(b) + Str(c);
    sort(sA.begin(), sA.end());
    sort(sBC.begin(), sBC.end());
    if(sA != sBC)
    {
        return false;
    }
    if(st.find(a) != st.end())
    {
        return false;
    }
    st.insert(a);
    return true;
}

int main()
{
    //ifstream cin("xnum.inp");
    //ofstream cout("xnum.out");
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cin >> n >> k;
    if(n == 4)
    {
        for(int i = 0; i < k; i++)
        {
            cout << ans4[i] << "\n";
        }
        return 0;
    }
    start = 1;
    for(int i = 2; i <= n; i++)
    {
        start *= 10;
    }
    finish = start * 10 - 1;
    for(int b = start; b <= finish; b++)
    {
        for(int c = start; c <= finish; c++)
        {
            if(Check(b * c, b, c))
            {
                ansA.push_back(b * c);
                ansB.push_back(b);
                ansC.push_back(c);
            }
            if(ansA.size() == k)
            {
                for(int i = 0; i < k; i++)
                {
                    cout << ansA[i] << "=" << ansB[i] << "*" << ansC[i] << "\n";
                }
                return 0;
            }
        }
    }
    return 0;
}
